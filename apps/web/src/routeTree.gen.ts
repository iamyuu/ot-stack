/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicLayoutRouteImport } from './routes/_public/layout'
import { Route as adminLayoutRouteImport } from './routes/(admin)/layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as adminDashboardRouteImport } from './routes/(admin)/dashboard'

const PublicLayoutRoute = PublicLayoutRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const adminLayoutRoute = adminLayoutRouteImport.update({
  id: '/(admin)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)
const adminDashboardRoute = adminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => adminLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof adminLayoutRouteWithChildren
  '/dashboard': typeof adminDashboardRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof adminLayoutRouteWithChildren
  '/dashboard': typeof adminDashboardRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(admin)': typeof adminLayoutRouteWithChildren
  '/_public': typeof PublicLayoutRouteWithChildren
  '/(admin)/dashboard': typeof adminDashboardRoute
  '/_public/login': typeof PublicLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/login'
  id:
    | '__root__'
    | '/'
    | '/(admin)'
    | '/_public'
    | '/(admin)/dashboard'
    | '/_public/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  adminLayoutRoute: typeof adminLayoutRouteWithChildren
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(admin)': {
      id: '/(admin)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof adminLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicLayoutRoute
    }
    '/(admin)/dashboard': {
      id: '/(admin)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof adminDashboardRouteImport
      parentRoute: typeof adminLayoutRoute
    }
  }
}

interface adminLayoutRouteChildren {
  adminDashboardRoute: typeof adminDashboardRoute
}

const adminLayoutRouteChildren: adminLayoutRouteChildren = {
  adminDashboardRoute: adminDashboardRoute,
}

const adminLayoutRouteWithChildren = adminLayoutRoute._addFileChildren(
  adminLayoutRouteChildren,
)

interface PublicLayoutRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  adminLayoutRoute: adminLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
